-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.



CREATE TABLE IF NOT EXISTS public.notes
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    project_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    body text COLLATE pg_catalog."default",
    CONSTRAINT notes_pkey PRIMARY KEY (id),
    CONSTRAINT fk_project FOREIGN KEY (project_id)
        REFERENCES public.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.notes
    OWNER to postgres;

ALTER TABLE IF EXISTS public.notes
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.notes TO anon;

GRANT ALL ON TABLE public.notes TO authenticated;

GRANT ALL ON TABLE public.notes TO postgres;

GRANT ALL ON TABLE public.notes TO service_role;
CREATE POLICY project_editors_and_readers_can_select
    ON public.notes
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((EXISTS ( SELECT 1
   FROM project_users pu
  WHERE ((pu.project_id = pu.project_id) AND (pu.user_id = auth.uid()) AND ((pu.access = 'edit'::access_level) OR (pu.access = 'read'::access_level)))
 LIMIT 1)));
CREATE POLICY project_editors_can_delete
    ON public.notes
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((EXISTS ( SELECT 1
   FROM project_users pu
  WHERE ((pu.project_id = pu.project_id) AND (pu.user_id = auth.uid()) AND (pu.access = 'edit'::access_level))
 LIMIT 1)));
CREATE POLICY project_editors_can_insert
    ON public.notes
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK ((EXISTS ( SELECT 1
   FROM project_users pu
  WHERE ((pu.project_id = pu.project_id) AND (pu.user_id = auth.uid()) AND (pu.access = 'edit'::access_level))
 LIMIT 1)));
CREATE POLICY project_editors_can_update
    ON public.notes
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((EXISTS ( SELECT 1
   FROM project_users pu
  WHERE ((pu.project_id = pu.project_id) AND (pu.user_id = auth.uid()) AND (pu.access = 'edit'::access_level))
 LIMIT 1)));

CREATE TRIGGER set_created_timestamp
    BEFORE UPDATE 
    ON public.notes
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_timestamp();

CREATE TRIGGER set_updated_timestamp
    BEFORE INSERT
    ON public.notes
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_created_timestamp();
